# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hAveegpZd5EHkrSs00WGMaC-m8KgjOYZ
"""

import numpy as np

def ES(losses, confidence=None, VaR=None):
    """
    Calculate the Expected Shortfall (ES), also known as Conditional VaR (CVaR).

    Parameters:
    losses: array of positively stated loss values
    confidence: risk level (e.g., 0.99 for 99%)
    VaR: pre-defined dollar value specifying the VaR threshold

    Returns:
    Expected Shortfall (average of losses exceeding VaR)
    """
    if VaR is None:
        if confidence is None:
            raise ValueError("Either confidence or VaR must be provided.")
        # If VaR is not provided, determine VaR based on the confidence percentile
        alpha = 1 - confidence
        VaR = np.percentile(losses, alpha * 100)

    # Calculate ES as the average of losses exceeding the VaR threshold
    es_value = np.mean(losses[losses > VaR])
    return es_value

# Unit test
u = np.random.uniform(0, 100, 100000)

# Test the ES function with a confidence level of 0.8
es_confidence = ES(losses=u, confidence=0.8)
print('ES with confidence:', np.round(es_confidence, 0) == 90)

# Test the ES function with a VaR of 80
es_var = ES(losses=u, VaR=80)
print('ES with VaR:', np.round(es_var, 0) == 90)