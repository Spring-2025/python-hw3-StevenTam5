# -*- coding: utf-8 -*-
"""QVAR.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xxo-fUcJy2xdYU8OvfA1usbYuXC9TUY2
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import norm

def VaR(r, confidence, principal=1):
    """
    This function returns the left tail value and displays a histogram
    r = a vector of stock returns
    confidence = confidence level (e.g., 0.95 for 95%)
    principal = investment initial value (default = 1)
    Returns the Value at Risk (VaR)
    """
    alpha = 1 - confidence
    var_threshold = np.percentile(r, alpha * 100)
    VaR_value = abs(principal * var_threshold)


    plt.hist(r, bins=50, alpha=0.75, edgecolor='black')
    plt.axvline(var_threshold, color='red', linestyle='dashed', linewidth=2, label=f'VaR at {confidence*100:.1f}%')
    plt.legend()
    plt.title("Distribution of Returns with VaR Threshold")
    plt.show()

    return VaR_value

def percent_var(r, confidence):
    """
    This function returns the left tail value and displays a histogram
    r = a vector of stock percent returns
    confidence = confidence level (e.g., 0.95 for 95%)
    Returns the percentile VaR value
    """
    alpha = 1 - confidence
    var_threshold = np.percentile(r, alpha * 100)


    plt.hist(r, bins=50, alpha=0.75, edgecolor='black')
    plt.axvline(var_threshold, color='red', linestyle='dashed', linewidth=2, label=f'VaR at {confidence*100:.1f}%')
    plt.legend()
    plt.title("Distribution of Returns with VaR Threshold")
    plt.show()

    return abs(var_threshold)


returns = np.random.normal(0, 1, 10000)
print("97.72th percentile:", np.percentile(returns, 97.72))


r = np.random.normal(0.05, 0.03, 1000000)
probability2SD = norm.cdf(2)

my_confidence = probability2SD
my_percent_var = percent_var(r, my_confidence)
print("VaR at confidence level:", np.round(my_percent_var, 2) == 0.01)


investment = 100000  # Example principal amount
my_VaR = VaR(r, my_confidence, principal=investment)
print(f"Value at Risk (VaR) for ${investment} at {my_confidence*100:.1f}% confidence: ${np.round(my_VaR, 2)}")